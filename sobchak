#!/usr/bin/env python3

# Sobchak
# An OpenStack instance scheduling optimizer.

import logging
import argparse
import os
import base64

from matplotlib import pyplot, patches
from io import BytesIO
from math import atan, sqrt, sin

from keystoneauth1.identity import v3
from keystoneauth1 import session as keystone_session
from keystoneclient.v3 import client as keystone_client
from novaclient import client as nova_client

from novaclient.v2.servers import Server
from novaclient.v2.hypervisors import Hypervisor

from time import sleep

# Load openrc values
try:
    PROJECT_ID = os.environ['OS_PROJECT_ID']
    AUTH_URL = os.environ['OS_AUTH_URL']
    USERNAME = os.environ['OS_USERNAME']
    PASSWORD = os.environ['OS_PASSWORD']
except KeyError:
    logging.error('Please source your OpenStack openrc file.')
    raise


def sigmoid(x):
    """sigmoid

    A sigmoid-like function.
    """
    return x / (1 + abs(x))

def get_object_by_id(objects, identifier):
    """get_object_by_id

    Returns the object which belongs to the given ID. Returns None if it wasn't
    found.
    """
    logging.debug('Searching for %s inside %s', identifier, objects)
    for obj in objects:
        if obj.id == identifier or obj.name == identifier:
            return obj
    logging.info('Could not find %s inside %s', identifier, objects)
    return None


class Session(keystone_session.Session):
    """Session

    Maintains an OpenStack session which can be used by the clients.
    """
    def __init__(self):
        auth = v3.Password(
            auth_url=AUTH_URL,
            username=USERNAME,
            password=PASSWORD,
            project_id=PROJECT_ID,
            user_domain_name='Default')
        keystone_session.Session.__init__(self, auth=auth)


class Migration(object):
    """Migration

    Contains information about a migration; a VM, a source and a destination.
    """
    def __init__(self, server, source, destination):
        self.server = server
        self.source = source
        self.destination = destination

    def __str__(self):
        return 'openstack server migrate {} --host {} #{} from {} to {}'.format(
                self.server.id, self.destination.name, self.server, self.source,
                self.destination)

    def __repr__(self):
        return self.__str__()

    @property
    def reverse(self):
        """reverse

        Returns the opposite migration.
        """
        return Migration(self.server, self.destination, self.source)


class Plot(object):
    """Plot

    Generates a graph and converts it to a base64-decoded PNG file.
    """
    def __init__(self, width, height, title, xlabel, ylabel):
        self.width = width
        self.height = height
        self._png_file = BytesIO()

        pyplot.xlim(1.1 * width)
        pyplot.ylim(1.1 * height)
        pyplot.gca().invert_xaxis()
        pyplot.gca().invert_yaxis()
        pyplot.title(title)
        pyplot.xlabel(xlabel)
        pyplot.ylabel(ylabel)

    def __del__(self):
        """__del__

        Make sure the plot is cleared when this object is destructed.
        """
        pyplot.clf()

    def add_graph(self, x, y, label):
        """add_graph

        Turn two lists representing x and y values into a plot and add it to
        the graph.
        """
        pyplot.plot(x[:len(y)], y[:len(x)], label=label)

    def add_box(self, width, height, label, color='b'):
        """add_box

        Add a box with a given width and height of a given color (blue by
        default) to the graph.
        """
        rect = patches.Rectangle(
            (0, 0),
            width,
            height,
            linewidth=1,
            edgecolor=color,
            label=label,
            facecolor='none')
        pyplot.gca().add_patch(rect)

    @property
    def png(self):
        """png

        Saves the current plot to the in-memory PNG file and returns the file.
        """
        pyplot.legend()
        pyplot.savefig(self._png_file, format='png')
        return self._png_file

    @property
    def base64(self):
        """base64

        Returns a base64-decoded string of the graph.
        """
        image = self.png.getvalue()
        return base64.encodestring(image).decode('utf-8')


class Report(object):
    """Report

    A Report object generates a report in the form of a HTML-page of a list of
    hypervisors and information about how certain migrations improve the
    resource distribution.
    """
    def __init__(self, inventory):
        self._inventory = inventory
        self._migration_report = ''

    def _generate_hypervisor_report(self, hypervisor):
        """_plot_hypervisor

        Returns the report for a single hypervisor.
        """
        def _dict_to_table(dictionary):
            """_dict_to_table

            Converts a dictionary to an HTML table.
            """
            table_contents = ''
            for key, value in dictionary.items():
                if isinstance(value, list):
                    _value = '<br />'.join(value)
                else:
                    _value = str(value)

                table_contents += '<tr>'
                table_contents += '<th scope="row" valign="top" align="right">'
                table_contents += '{}</th><td>{}</td>'.format(key, _value)

            return '<table>{}</table>'.format(table_contents)

        table = _dict_to_table(hypervisor.to_dict())
        plot = '<img src="data:image/png;base64,' + hypervisor.plot + '"/>'

        return '<div class="row">' + \
               '<div class="column">{}</div>'.format(table) + \
               '<div class="column">{}</div>'.format(plot) + \
               '</div>'

    def add_migrations(self, migrations):
        """add_migrations

        Adds the migrations to the report.
        """
        code_block = lambda c: '<pre><code>' + c + '</code></pre>'
        migration_list = '<br />'.join([str(m) for m in migrations])
        title = '<h2>Migrations</h2>'
        self._migration_report = title + code_block(migration_list)

    @property
    def head(self):
        """head

        Returns the HTML head of the report.
        """
        return '<head><style>' + \
               'th,td{ border-bottom: 1px solid #ddd; }' + \
               'tr:hover{ background-color:#f5f5f5; }.column{' + \
               'float:left;width:50%;padding:10px;height:100%;}' + \
               '*{box-sizing:border-box;}' + \
               '</style></head>'

    @property
    def body(self):
        """body

        Returns the HTML body of the report.
        """
        body = '<h1>Migration report</h>'
        body += self._migration_report
        body += '<h2>Hypervisors</h2>'
        for hypervisor in self._inventory.hypervisors:
            body += self._generate_hypervisor_report(hypervisor)

        return '<body>{}</body>'.format(body)

    @property
    def page(self):
        """page

        Returns the report as HTML.
        """
        return '<html>{}{}</html>'.format(self.head, self.body)


class Inventory(object):
    """Inventory

    An object containing Hypervisor and VM objects which are fetched using the
    OpenStack API.
    """
    def __init__(self, novaclient, config={}):
        self._client = novaclient
        self._config = config
        self._hypervisors = []
        self._vms = []
        self._flavors = []

    def to_dict(self):
        """to_dict

        Returns the inventory as a dictionary.
        """
        return {
                'common_ratio': self.common_ratio,
                'inventory': [ h.to_dict() for h in self.hypervisors ]
                }

    def snapshot(self):
        """snapshot

        Saves a snapshot of the current inventory.
        """
        for hypervisor in self.hypervisors:
            hypervisor.snapshot()

    def use_snapshot(self):
        """use_snapshot

        Reverts to the last snapshot.
        """
        for hypervisor in self.hypervisors:
            hypervisor.use_snapshot()

    @property
    def hypervisors(self):
        """hypervisors

        Returns a list of hypervisors as CustomHypervisor objects. If it's the
        first time the list is being called, the VM's are attached to their
        hypervisors.
        """
        if not self._hypervisors:
            logging.info('Fetching hypervisor info')
            self._hypervisors = [
                    CustomHypervisor(h, self.common_ratio, self._config)
                    for h in self._client.hypervisors.list() ]

            for vm in self.vms:
                hypervisor = get_object_by_id(self._hypervisors, vm.hypervisor)
                if not hypervisor:
                    raise ValueError('Unknown hypervisor for %s (status: %s)',
                            vm.name, vm.status)
                hypervisor.add_server(vm, force=True)

            assert hypervisor.verify_available_resources()
            self.snapshot()

        return self._hypervisors

    @property
    def vms(self):
        """vms

        Returns a list of VM's as CustomServer objects.
        """
        if not self._vms:
            logging.info('Fetching VM info')
            opts = { 'all_tenants': True }
            self._vms = [ CustomServer(vm, self.flavors) \
                    for vm in self._client.servers.list(search_opts=opts)
                    if vm.status != 'SHELVED_OFFLOADED' ]

        return self._vms

    @property
    def enabled_hypervisors(self):
        """enabled_hypervisors

        Returns a list of enabled hypervisors.
        """
        return [h for h in self.hypervisors if h.enabled]

    @property
    def left_divergent(self):
        """left_divergent

        Returns the enabled hypervisor which is the most divergent to the left
        and has a negative score, so it can help. Returns None if no hypervisors
        fit that profile.
        """
        candidate_hypervisors = [h for h in self.enabled_hypervisors \
                if h.score < 0]
        if candidate_hypervisors:
            return max(candidate_hypervisors, key=lambda h: h.divergence[0])
        else:
            return None

    @property
    def right_divergent(self):
        """right_divergent

        Returns the enabled hypervisor which is the most divergent to the right
        and has a positive score, so it can help. Returns None if no hypervisors
        fit that profile.
        """
        candidate_hypervisors = [h for h in self.enabled_hypervisors \
                if h.score > 0]
        if candidate_hypervisors:
            return max(candidate_hypervisors, key=lambda h: h.divergence[1])
        else:
            return None

    @property
    def common_ratio(self):
        """common_ratio

        Returns the most common ratio amongst all VMs.
        """
        ratios = [ vm.ratio for vm in self.vms ]
        return max(ratios, key=ratios.count)

    @property
    def flavors(self):
        """flavors

        Returns a list of Flavors.
        """
        if not self._flavors:
            self._flavors = self._client.flavors.list(is_public=None)

        return self._flavors

    def _increase_buffer(self, hypervisor, skip_hypervisors=[],
            skip_servers=[]):
        """_increase_buffer

        Returns a migration which will temporarily give a given hypervisor extra
        available resources. Does not use the hypervisors given in `skip` as a
        buffer.
        """
        potential_buffers = [h for h in self.enabled_hypervisors \
                if h not in skip_hypervisors and h is not hypervisor]
        servers = [s for s in hypervisor.servers if s not in skip_servers]

        buffers = reversed(sorted(potential_buffers,
                key=lambda h: h.available_vcpus * h.available_ram))

        sorted_servers = reversed(sorted(servers, key=lambda s: s.length))

        for buff in buffers:
            for server in sorted_servers:
                if buff.add_server(server):
                    logging.info('======= increase buffer %s =======', server)
                    hypervisor.remove_server(server)
                    return Migration(server, hypervisor, buff)

        logging.warning('Could not find available resources to migrate!')
        return None

    def _try_migration(self, migration):
        """_try_migration

        Tries a migration and adds a migration to a buffer hypervisor if needed.
        Returns a tuple containing a list of migrations and an optional post
        migration.
        """
        migration.source.remove_server(migration.server)
        migrations = [migration]
        post_migration = None
        while not migration.destination.add_server(migration.server):
            logging.info('Unable to migrate server %s, adding buffer.',
                    migration.server)
            buffer_migration = self._increase_buffer(migration.destination,
                    skip_hypervisors=[migration.source],
                    skip_servers=[migration.server])
            if buffer_migration:
                migrations.append(buffer_migration)
                post_migration = buffer_migration.reverse
                post_migration.destination = migration.source
            else:
                return None
        return (migrations, post_migration)

    def _plan_migrations(self, needed_migrations):
        """_plan_migrations

        Takes a list of Migration objects and determine which actual migrations
        need to be done to realize this (as some migrations will not be possible
        due to insufficient available resources). Returns a list of Migration
        objects or an empty list if it's not possible.
        """
        migrations = []
        skip_servers = []

        for migration in needed_migrations:
            if migration.server in skip_servers:
                skip_servers.remove(migration.server)
                continue
            new_migrations = self._try_migration(migration)
            if not new_migrations:
                logging.warning('Could not get enough free resources.')
                self.use_snapshot()
                return []
            new_migration, post_migration = new_migrations
            migrations.extend(new_migration)
            if post_migration:
                skip_servers.append(post_migration.server)
                needed_migrations.append(post_migration)

        return migrations

    def _score_with_vm(self, hypervisor, vm):
        """_score_with_vm

        Returns the score a hypervisor would have if it hosted a given VM.
        """
        if not hypervisor.add_server(vm):
            return hypervisor.score
        else:
            score = hypervisor.score
            hypervisor.remove_server(vm)
            return score

    def _mix_hypervisors(self, subject, improvement):
        """_mix_hypervisors

        Takes two hypervisors (a `subject` which is to be improved and an
        `improvement` which has the divergence which enables the improvement) and
        mixes their VMs to improve the overall score.

        Returns a list of migrations if the combined score is lowered, otherwise
        returns None. Also returns None if the VMs do not fit on the two hypervisors
        (e.g. due to bad scheduling).

        Note that the list of migrations that is generated does not take hypervisor
        resources into account, so shuffling between a third node is needed when
        there's not enough free resources to migrate certain VMs.
        """
        logging.info('Mixing %s and %s', subject.name, improvement.name)
        score_before = abs(subject.score) + abs(improvement.score)
        subject_vms = subject.pop()
        improvement_vms = improvement.pop()
        vms = subject_vms + improvement_vms

        while vms:
            best_vm = min(vms,
                    key=lambda vm: abs(self._score_with_vm(subject, vm)))
            if not subject.add_server(best_vm):
                break
            vms.remove(best_vm)

        for vm in vms:
            if not improvement.add_server(vm):
                logging.warning('Could not fit VMs in hypervisors!')
                subject.servers = subject_vms
                improvement.servers = improvement_vms
                return None

        score_after = abs(subject.score) + abs(improvement.score)
        logging.info('Score from %f to %f', score_before, score_after)
        if score_after >= score_before:
            subject.servers = subject_vms
            improvement.servers = improvement_vms
            return None

        return [Migration(s, improvement, subject) for s in subject.servers \
                if s not in subject_vms] + \
               [Migration(s, subject, improvement) for s in improvement.servers \
                if s not in improvement_vms]

    def optimize(self):
        """optimize

        Generates and returns a list of migrations to improve Hypervisor
        resource distribution.
        """
        # TODO Re-generate score-sorted hypervisor list after each improvement
        for subject in reversed(sorted(self.enabled_hypervisors, \
                key=lambda h: abs(h.score))):
            if subject.score < 0:
                improvement = self.right_divergent
            else:
                improvement = self.left_divergent

            if not improvement:
                continue

            needed_migrations = self._mix_hypervisors(subject, improvement)
            self.use_snapshot()
            if needed_migrations:
                return self._plan_migrations(needed_migrations)

        return []


class CustomHypervisor(Hypervisor):
    """CustomHypervisor

    A CustomHypervisor object contains information about its available resources
    and the VMs it hosts.
    """
    def __init__(self, hypervisor, common_ratio, config={}):
        Hypervisor.__init__(self, hypervisor.manager, hypervisor._info)
        self.servers = []
        self._server_snapshot = []
        self._common_ratio = common_ratio
        self._ram_overcommit = config.get('ram_overcommit', 1)
        self._cpu_overcommit = config.get('cpu_overcommit', 4)
        self._memory_overhead = config.get('hypervisor_memory_overhead', 32768)
        self._gave_cpu_warning = False
        self._gave_ram_warning = False
        logging.debug('Initialized hypervisor: %s', self.id)

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.__str__()

    def snapshot(self):
        """snapshot

        Saves the current VM list.
        """
        self._server_snapshot = self.servers

    def use_snapshot(self):
        """use_snapshot

        Resets the VM list to the last snapshot.
        """
        self.servers = self._server_snapshot

    def verify_available_resources(self):
        """verify_available_resources

        Checks if OpenStack agrees with our calculated available resources. If
        so, returns True, else, returns False.
        """
        available_vcpus_check = self.vcpus * self._cpu_overcommit \
                - self.vcpus_used
        if not self.available_vcpus == available_vcpus_check:
            logging.error('Calculated available VCPUs (%i) is not %i',
                    self.available_vcpus, available_vcpus_check)
            logging.error('Please check the configuration.')
            return False

        available_ram_check = self.memory_mb * self._ram_overcommit \
                - self.memory_mb_used
        if not self.available_ram == available_ram_check:
            logging.error('Calculated available RAM (%i) is not %i',
                    self.available_vcpus, available_vcpus_check)
            logging.error('Please check the configuration.')
            return False

        return True

    def to_dict(self):
        """to_dict

        Returns the hypervisor as a dict.
        """
        dictionary = {
            'name': self.name,
            'score': self.score,
            'divergence': self.divergence,
            'enabled': self.enabled,
            'vcpus': self.vcpus * self._cpu_overcommit,
            'vcpus_used': self.vcpus_used,
            'memory_mb': self.memory_mb * self._ram_overcommit,
            'memory_mb_used': self.memory_mb_used,
            'vms': [ s.name for s in self.servers ],
        }
        return dictionary

    @property
    def plot(self, include_snapshot=True):
        """plot

        Generates a plot of the hypervisor and its resources and returns it as a
        Base64 decoded string.

        Warning: enabling `include_snapshot` will actually revert the hypervisor
        to the last snapshot!
        """
        # Generate a plot
        width = self.memory_mb * self._ram_overcommit - self._memory_overhead
        height = self.vcpus * self._cpu_overcommit
        plot = Plot(width, height, self.name, 'memory [MB]', 'VCPUs')

        # Draw graphs representing VMs
        def _generate_data(servers):
            x = [ i for i in range(width) ]
            y = [ 0 ]
            for vm in servers:
                dy_dx = vm.vcpus / vm.ram
                for _ in range(vm.ram):
                    y.append(y[-1] + dy_dx)
            return x, y

        x, y = _generate_data(self.servers)
        plot.add_graph(x, y, 'Hosted VMs (after)')

        if include_snapshot:
            self.use_snapshot()
            x, y = _generate_data(self.servers)
            plot.add_graph(x, y, 'Hosted VMs (before)')

        # Draw box representing hypervisor resources
        plot.add_box(width, height, 'Available resources')

        # Draw graphs representing common ratio
        dx = self._common_ratio
        x = []
        y = []
        next_x = width
        next_y = height
        while next_x >= 0 and next_y >= 0:
            x.append(next_x)
            y.append(next_y)
            next_x -= dx
            next_y -= 1
        plot.add_graph(x, y, 'Most common resource ratio')

        return plot.base64

    @property
    def name(self):
        """name

        Returns the hypervisor domain name.
        """
        return self.hypervisor_hostname

    @property
    def enabled(self):
        """enabled

        Returns True if the hypervisor is enabled.
        """
        return self.status == 'enabled'

    @property
    def available_ram(self):
        """available_ram

        Returns the amount of available RAM in MB's, taking memory overhead and
        the overcommit ratio into account. Note that memory overhead is already
        calculated into `self.memory_mb_used`.
        """
        available_ram = self.memory_mb * self._ram_overcommit \
            - sum([ vm.ram for vm in self.servers ]) - self._memory_overhead

        if available_ram < 0 and not self._gave_ram_warning:
            logging.warning('Used memory above overcommit treshold on %s',
                    self.name)
            self._gave_ram_warning = True

        return available_ram

    @property
    def available_vcpus(self):
        """available_vcpus

        Returns the number of available VCPU's.
        """
        available_vcpus = self.vcpus * self._cpu_overcommit \
            - sum([ vm.vcpus for vm in self.servers ])

        if available_vcpus < 0 and not self._gave_cpu_warning:
            logging.warning('Used vCPUS above overcommit treshold on %s',
                    self.name)
            self._gave_cpu_warning = True

        return available_vcpus

    @property
    def ratio(self):
        """ratio

        Returns the ratio between the available RAM (in MB's) and the available
        number of vCPU's.
        """
        if not self.available_vcpus:
            return self.available_ram
        return int(self.available_ram / self.available_vcpus)

    @property
    def divergence(self):
        """divergence

        Returns a tuple containing the sum of left- and right-handed divergent
        VMs.
        """
        left = right = 0
        for vm in self.servers:
            divergence = vm.calculate_divergence(self._common_ratio)
            if divergence < 0:
                left -= divergence
            else:
                right += divergence
        return (left, right)

    @property
    def score(self):
        """score

        Returns a score based on the difference between the most common RAM/vCPU
        ratio amongst VMs and the RAM/vCPU ratio of available resources of this
        hypervisor. The closer to zero, the better the score.
        """
        # TODO: Account for CPU/RAM cost
        weight_ram = sigmoid(self.available_ram / self.memory_mb)
        weight_vcpus = sigmoid(self.available_vcpus / self.vcpus)
        angle = atan(self._common_ratio) - atan(self.ratio)
        return angle * (weight_ram + weight_vcpus)

    def pop(self):
        """pop

        Returns all servers and removes them from this hypervisor.
        """
        servers = self.servers
        self.servers = []
        return servers

    def add_server(self, server, force=False):
        """add_server

        Adds an OpenStack instance to the Hypervisor. Returns True if succeeded,
        else returns False.
        """
        if not force and (server.ram > self.available_ram or \
                server.vcpus > self.available_vcpus):
            return False
        logging.info('Adding %s to %s', server, self)
        self.servers.append(server)
        return True

    def remove_server(self, server):
        """remove_server

        Removes a given VM from this hypervisor. Returns True on success,
        otherwise (e.g. if the VM wasn't found on this server) returns False.
        """
        logging.info('Removing %s from %s', server, self)
        filtered_servers = [s for s in self.servers if s.id != server.id]
        assert len(filtered_servers) == len(self.servers) - 1
        self.servers = filtered_servers


class CustomServer(Server):
    """CustomServer

    A CustomServer object contains information about an OpenStack instance and
    the resources it needs.
    """
    def __init__(self, server, flavors):
        Server.__init__(self, server.manager, server._info)
        self._flavor = get_object_by_id(flavors, self.flavor['id'])
        logging.debug('Initialized server: %s', self.id)

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.__str__()

    @property
    def ram(self):
        """ram

        Returns the memory which is assigned to this server in MB's.
        """
        return self._flavor.ram

    @property
    def vcpus(self):
        """vcpus

        Returns the number of virtual CPU's which are assigned to this server.
        """
        return self._flavor.vcpus

    @property
    def ratio(self):
        """ratio

        Returns the RAM/vCPU ratio, rounded down to the nearest integer to allow
        ratio comparison as it prevents floating point comparison issues.
        """
        return int(self.ram/self.vcpus)

    @property
    def hypervisor(self):
        """hypervisor

        Returns the hypervisor hostname.
        """
        return self.__getattr__('OS-EXT-SRV-ATTR:hypervisor_hostname')

    @property
    def length(self):
        """length

        Returns the length of this VM's resource vector.
        """
        return sqrt(self.ram * self.ram + self.vcpus * self.vcpus)

    def calculate_divergence(self, reference):
        """calculate_divergence

        Returns the divergence from a reference slope. See README.md for more
        information about what this actually means.
        """
        angle = atan(self.ratio) - atan(reference)
        return self.length * sin(angle)


def parse_config(filename):
    """parse_config

    Load a certain YAML-file and return its contents as a dictionary.
    """
    try:
        with open(filename, 'r') as config:
            return yaml.safe_load(config)
    except Exception as e:
        logging.error('Could not load %s: %s', filename, e)
        exit(1)


def parse_args():
    """parse_args

    As always, parse given arguments using the usual argparse module and return
    the parsed args object.
    """
    parser = argparse.ArgumentParser(description="""
       _|_|_|            _|                  _|                  _|
     _|          _|_|    _|_|_|      _|_|_|  _|_|_|      _|_|_|  _|  _|
       _|_|    _|    _|  _|    _|  _|        _|    _|  _|    _|  _|_|
           _|  _|    _|  _|    _|  _|        _|    _|  _|    _|  _|  _|
     _|_|_|      _|_|    _|_|_|      _|_|_|  _|    _|    _|_|_|  _|    _|

> You mark that frame an eight, you're entering a world of pain. A world of
> pain.
                                                              ~ Walter Sobchak

Sobchak is your friendly neighbourhood OpenStack instance scheduling optimizer,
which generates a list of instance migrations to optimally make use of
hypervisor resources.
""", formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-c', '--configfile', action='store',
                        help='Configuration file.')
    parser.add_argument('-v', '--verbose',
                        help='Enable verbose logs', action='store_true')
    parser.add_argument('-d', '--debug',
                        help='Enable debug logs', action='store_true')
    parser.add_argument('-R', '--generate-report',
                        help='Generate a report', action='store_true')

    return parser.parse_args()


def run(configfile, debug, verbose, generate_report):
    """run

    Actually run the program; fetch a Hypervisor-VM inventory and determine
    which migrations can be executed to improve the current resource
    distribution.
    """
    if verbose:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s %(levelname)-8s %(message)s'
        )
    elif debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s %(levelname)-8s %(message)s'
        )

    # Parse configfile (if given)
    config = {}
    if configfile:
        config = parse_config(configfile)
        logging.debug('Loaded config: %s', config)

    # Create OpenStack Nova client
    sess = Session()
    keystone = keystone_client.Client(session=sess)
    nova = nova_client.Client('2', session=sess)

    # Create inventory
    inventory = Inventory(nova, config)

    # Generate and print migration list
    migrations = inventory.optimize()
    print('\n'.join(migrations))

    # Generate report (if needed)
    if generate_report:
        report = Report(inventory)
        report.add_migrations(migrations)
        with open('report.html', 'w+') as f:
            f.write(report.page)
            print('Report available: {}'.format(os.path.abspath('report.html')))

if __name__ == "__main__":
    args = parse_args()
    kwargs = vars(args)
    run(**kwargs)
