#!/usr/bin/env python3

import argparse
import logging

from src.session import Session
from src.inventory import Inventory
from src.report import Report
from src.helper import parse_config

DESCRIPTION = """

       _|_|_|            _|                  _|                  _|
     _|          _|_|    _|_|_|      _|_|_|  _|_|_|      _|_|_|  _|  _|
       _|_|    _|    _|  _|    _|  _|        _|    _|  _|    _|  _|_|
           _|  _|    _|  _|    _|  _|        _|    _|  _|    _|  _|  _|
     _|_|_|      _|_|    _|_|_|      _|_|_|  _|    _|    _|_|_|  _|    _|

> You mark that frame an eight, you're entering a world of pain. A world of
> pain.
                                                              ~ Walter Sobchak

Sobchak is your friendly neighbourhood OpenStack instance scheduling optimizer,
which generates a list of instance migrations to optimally make use of
hypervisor resources.
"""
VERSION = '0.1'


def parse_args():
    """parse_args

    As always, parse given arguments using the usual argparse module and return
    the parsed args object.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION,
            formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-V', '--version',
                        help='Show version', action='store_true')
    parser.add_argument('-c', '--configfile', action='store',
                        help='Configuration file')
    parser.add_argument('-t', '--template', action='store',
                        help='HTML report template', default='template.html')
    parser.add_argument('-i', '--iterations', action='store', type=int,
                        help='Number of iterations (default: 3)', default=3)
    parser.add_argument('-v', '--verbose',
                        help='Enable verbose logs', action='store_true')
    parser.add_argument('-d', '--debug',
                        help='Enable debug logs', action='store_true')
    parser.add_argument('-R', '--generate-report',
                        help='Generate a report', action='store_true')

    return parser.parse_args()


def run(version, configfile, debug, verbose, generate_report, iterations,
        template):
    """run

    Fetch a Hypervisor-VM inventory and determine which migrations can be
    executed to improve the current resource distribution.
    """
    if version:
        print('Sobchak - v{}'.format(VERSION))
        exit(0)

    logging_format = '%(asctime)s %(levelname)-8s %(message)s'
    if verbose:
        logging.basicConfig(level=logging.INFO, format=logging_format)
    elif debug:
        logging.basicConfig(level=logging.DEBUG, format=logging_format)

    # Parse configfile (if given)
    config = {}
    if configfile:
        config = parse_config(configfile)
        logging.debug('Loaded config: %s', config)

    # Create OpenStack Nova client session
    sess = Session()

    # Generate migration list
    inventory = Inventory(sess.nova_client, config)
    migrations = inventory.optimize(iterations=iterations)

    # Generate report or print migration list
    if generate_report:
        report = Report(inventory, template)
        report.add_migrations(migrations)
        report.save()
    else:
        print('\n'.join([str(m) for m in migrations]))

if __name__ == "__main__":
    args = parse_args()
    kwargs = vars(args)
    run(**kwargs)
