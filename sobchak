#!/usr/bin/env python3

# Sobchak
# An OpenStack instance scheduling optimizer.

import logging
import argparse


class HypervisorList(List):
    """HypervisorList

    An iterable object containing Hypervisor objects. Fetches an Hypervisor-VM
    inventory from either a given file or using the OpenStack client.
    """
    def __init__(self):
        self = self._fetch_hypervisors()

    def _fetch_hypervisors(self):
        """_fetch_hypervisors

        Fetches a Hypervisor-VM inventory using the OpenStack CLI client and
        returns it as a list.
        """
        pass


class Hypervisor(object):
    """Hypervisor

    A Hypervisor object contains information about its available resources and
    the VMs it hosts.
    """
    def __init__(self):
        self.vms = _fetch_data()
        self.vcpus, self.ram = self._fetch_resources()

    def _fetch_data(self):
        """_fetch_data

        Fetches a list of VMs using the OpenStack CLI client and converts its
        output into a list of VM objects.
        """
        pass

    def _fetch_resources(self):
        """_fetch_resources

        Fetches the Hypervisor resources using the OpenStack CLI client.
        """
        pass


class VM(object):
    """VM

    A VM object contains information about the resources needed for the VM.
    """
    def __init__(self)
        self.vcpus, self.ram = self._fetch_resources()

    def _fetch_resources(self):
        """_fetch_resources

        Fetches the flavor data of this VM using the OpenStack CLI client.
        """
        pass


def parse_args():
    parser = argparse.ArgumentParser(
        description='An OpenStack instance scheduling optimizer.')

    parser.add_argument('-i', '--datafile', action='store',
            help='Input file containing Hypervisor-VM inventory.')
    parser.add_argument('-o', '--outputfile', action='store',
            help='Output file containing list of migrations.')
    parser.add_argument('-f', '--format', action='store',
            help='Output format (csv, json)')
    parser.add_argument('-d', '--debug',
            help='Enable debug', action='store_true')

    return parser.parse_args()


def run(datafile, outputfile, format, debug=False):
    if debug:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s %(levelname)-8s %(message)s'
        )

if __name__ == "__main__":
    args = parse_args()
    kwargs = vars(args)
    run(**kwargs)
